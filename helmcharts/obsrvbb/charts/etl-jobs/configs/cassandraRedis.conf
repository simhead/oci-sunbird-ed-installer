# redis
redis.host="{{ .Values.global.redis.host }}"
redis.port="{{ .Values.global.redis.port }}"
redis.connection.max="{{ .Values.redis.connection.max }}"
location.db.redis.key.expiry.seconds={{ .Values.redis.key_expiry_seconds }}
redis.connection.idle.max={{ .Values.redis.connection.idle_max }}
redis.connection.idle.min={{ .Values.redis.connection.idle_min }}
redis.connection.minEvictableIdleTimeSeconds={{ .Values.redis.connection.min_evict_idle_seconds }}
redis.connection.timeBetweenEvictionRunsSeconds={{ .Values.redis.connection.time_evict_run_second }}
redis.max.pipeline.size="{{ .Values.redis.max_pipeline_size }}"


#CassandraToRedis Config
spark.cassandra.connection.host="{{ .Values.global.cassandra.host }}"
cassandra.user.keyspace="{{ .Values.cassandra.keyspace }}"
cassandra.user.table="{{ .Values.cassandra.user.table }}"
redis.user.database.index="{{ .Values.redis.user.index }}"
redis.user.input.index={{ .Values.redis.user.input_index }}
redis.user.backup.dir="/data/analytics/content-snapshot/anonymous-user-backup"
redis.scan.count="{{ .Values.redis.scan_count }}"
redis.user.index.source.key="{{ .Values.redis.user.source_key }}"
cassandra.read.timeoutMS="{{ .Values.cassandra.read_timeout }}"
cassandra.query.retry.count="{{ .Values.cassandra.retry_count }}"
cassandra.input.consistency.level="{{ .Values.cassandra.input_consistency_level }}"